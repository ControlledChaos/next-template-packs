//
// BuddyPress Sass Mixins
//

// This file provides some basic mixins for BP elements
// such as box sizing, radius, calc etc


// ======= Typography ======

// BP provides two mixins for font size, one basic  that states
// a value and can produce rem & px versions the other that calculates
// a reduced size for small
// screen sizes or series of screens described as breakpoints & can
// be termed responsive font sizing.



// Font size decs are used with caution BP doesn't manage
// layout sizes & must take care to work with existing layout sizes.

@mixin font-size($font-size: 16) {
	$rem-font-value: ($font-size / 10);
	font-size: ($font-size * 1px);
	//font-size: $rem-font-value + rem;
}


// The following Sass map handles some basic re-sizing of BP fonts.
// Sizes are set to change on the medium breakpoint.
// It is hard for BP to know what the theme is doing so we are
// limited in what we can do here.
// The dev can feed a value to the mixin which will then be calculated
// below to find a reduced size.

@mixin responsive-font($res-size: 16) {

	$the-sizes: $res-size;

	$small: round( ($the-sizes / 1.2) );
	$larger: $the-sizes;

	$the-sizes: (
		null:   $small,
		46.8em: $larger
	);

	@each $font-breakpoint, $resonsive-font-size in $the-sizes {
		@if $font-breakpoint == null {
			font-size: $resonsive-font-size + px;
		}
		@else {
			@media screen and (min-width: $font-breakpoint) {
				font-size: $resonsive-font-size + px;
			}
		}
	}

}

// Essential em based breakpoints
// mixin wraps rulesets or properties.
// written as:
// @include medium-up() {
//  body {property: value;}
// }

@mixin small-up {
	@media screen and (min-width: 24em) {
		@content;
	}
}

@mixin medium-small-up {
	@media screen and (min-width: 32em) {
		@content;
	}
}

@mixin medium-max {
	@media screen and (max-width: 46.8em) {
		@content;
	}
}

@mixin medium-up {
	@media screen and (min-width: 46.8em) {
		@content;
	}
}

@mixin large-up {
	@media screen and (min-width: 75em) {
		@content;
	}
}

// 'clearfix-element' allows us to pass an element, class or id to the mixin.
// Use where we need to have float containment and where getting to the physical element
// to add a class of 'clearfix' is problematic.
@mixin clearfix-element($item) {

	#{$item}:before,
	#{$item}:after {
		content: " ";
		display: table;
	}
	#{$item}:after {
		clear:both;
	}

}


// To allow mixins to pass VendorPrefix scss-lint tests we disable lint-test
// for specific blocks / rulesets
// until such time as exemption lists can be built for the scss-lint.yml?
// Any vendor prefix properties / mixins need to be in this block

// scss-lint:disable VendorPrefix


// Box model - defaults to value 'border-box'
// Vendor prefixes are  pretty much redundent for this property,
// consider removing
@mixin box-model($box-type: null) {

	@if $box-type {
		// if a param was passed through
		$box-type: $box-type;
	} @else {
		$box-type: border-box;
	}

	-webkit-box-sizing: $box-type;
	-moz-box-sizing: $box-type;
	box-sizing: $box-type;
}

// Border radius
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;
}

@mixin border-top-radius($radius) {
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
	background-clip: padding-box;
}

@mixin border-right-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
	background-clip: padding-box;
}

@mixin border-left-radius($radius) {
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
	background-clip: padding-box;
}

// very basic box-shadow mixin  - this needs to be
// updated & improved
@mixin box-shadow($values...) {
	-webkit-box-shadow: $values;
	-moz-box-shadow: $values;
	box-shadow: $values;
}

// Calc e.g (100% - 10px)
@mixin calc($property, $expression) {
	#{$property}: -webkit-calc(#{$expression});
	#{$property}: -moz-calc(#{$expression});
	#{$property}: calc(#{$expression});
}


// Vertical centering
// This class allows us to center child elements
// using flexbox this is a progressive enhancement,
// it won't work in all browsers, older browser will simply
// fall back to non centered or using older techniques.
// N.B It would be prefereable to remove the older property syntax
@mixin center-vert() {
		display: -webkit-box; // older
		display: -ms-flexbox; // older
		display: -webkit-flex; // current prefix
		display: flex; // current specs
		-ms-flex-align: center; //older?
		-webkit-align-items: center;
		-webkit-box-align: center; // old
		align-items: center; // current specs
}

// Re-enable the VendorPrefix lint test
// scss-lint:enable VendorPrefix

// BP message boxes
// Creates a message box with border, background color
// If  no text-color passed in then the background used for
// text is darkened by 50%.
@mixin message-box($background, $text-color: null) {

	@if $text-color {
		// if a param was passed through
		$text-color: $text-color;
	} @else {
		$text-color: darken($background, 50%);
	}

	background: lighten($background, 10%);
	border: 1px solid darken($background, 10%);
	color: $text-color;
}

// Links as a tabbed effect
// renders links in a horizontal layout as a tab effect on the current selected links

@mixin tabbed-links() {

	.button-tabs {
		border-bottom: 1px solid $bp-border-dark;
		float: none;
		margin: $marg-lrg 0 $marg-sml;

		&:before,
		&:after {
			content: " ";
			display: block;
		}

		&:after {
			clear: both;
		}

		li {
			float: left;
			list-style: none;
			margin: 0 $marg-med 0 0;

			a {
				background: none;
				border: none;
			}
		}

		li.current {
			border-color: $bp-border-dark $bp-border-dark #fff;
			border-style: solid;
			border-top-left-radius: 4px;
			border-top-right-radius: 4px;
			border-width: 1px;
			margin-bottom: -1px;
			padding: 0 $pad-sml;

			a {
				color: $black;
			}
		}
	}

	// we don't want top margin if tabs are on the top subnav position
	.tabbed-links > .button-tabs {
		margin-top: 0;
	}
}

// BP message boxes
@mixin message-box($background: #fff, $text-color: null, $border: null) {

	@if $text-color {
		// if a param was passed through
		$text-color: $text-color;
	} @else {
		$text-color: darken($background, 50%);
	}

	background: $background;

	@if $border != none {
		@if $border {
			border: $border;
		} @else {
			border: 1px solid darken($background, 10%);
		}
	}
	color: $text-color;
}

// Password warn colors
@mixin pwd-bad-colors($background: null, $border: null) {

	@if $background {
		$background: $background;
	} @else {
		$background: $background-bad;
	}

	background-color: $background;

	@if $border {
		$border: $border;
	} @else {
		$border: $border-bad;
	}

	border-color: $border;
}

@mixin pwd-short-colors($background: null, $border: null) {

	@if $background {
		$background: $background;
	} @else {
		$background: $background-short ;
	}

	background-color: $background;

	@if $border {
		$border: $border;
	} @else {
		$border: $border-short;
	}

	border-color: $border;
}

@mixin pwd-good-colors($background: null, $border: null) {

	@if $background {
		$background: $background;
	} @else {
		$background: $background-good;
	}

	background-color: $background;

	@if $border {
		$border: $border;
	} @else {
		$border: $border-good;
	}

	border-color: $border;
}
